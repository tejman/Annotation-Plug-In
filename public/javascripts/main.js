// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var Comment, commentMark, currentUserSelection, renderComments, selectControl, selectController, userComments;
    selectController = function() {
      var restoreSelection, saveSelection;
      if (window.getSelection && document.createRange) {
        saveSelection = function(containerEl) {
          var preSelectionRange, range, start;
          range = window.getSelection().getRangeAt(0);
          preSelectionRange = range.cloneRange();
          preSelectionRange.selectNodeContents(containerEl);
          preSelectionRange.setEnd(range.startContainer, range.startOffset);
          start = preSelectionRange.toString().length;
          console.log(preSelectionRange);
          return {
            start: start,
            end: start + range.toString().length
          };
        };
        restoreSelection = function(containerEl, savedSel) {
          var charIndex, foundStart, i, nextCharIndex, node, nodeStack, range, sel, stop;
          charIndex = 0;
          range = document.createRange();
          range.collapse(true);
          nodeStack = [containerEl];
          foundStart = false;
          stop = false;
          while (!stop && (node = nodeStack.pop())) {
            if (node.nodeType === 3) {
              nextCharIndex = charIndex + node.length;
              if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {
                range.setStart(node, savedSel.start - charIndex);
                foundStart = true;
              }
              if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {
                range.setEnd(node, savedSel.end - charIndex);
                stop = true;
              }
              charIndex = nextCharIndex;
            } else {
              i = node.childNodes.length;
              while (i--) {
                nodeStack.push(node.childNodes[i]);
              }
            }
          }
          sel = window.getSelection();
          console.log(sel);
          sel.removeAllRanges();
          return sel.addRange(range);
        };
      } else if (document.selection) {
        saveSelection = function(containerEl) {
          var preSelectionTextRange, selectedTextRange, start;
          selectedTextRange = document.selection.createRange();
          preSelectionTextRange = document.body.createTextRange();
          preSelectionTextRange.moveToElementText(containerEl);
          preSelectionTextRange.setEndPoint("EndToStart", selectedTextRange);
          start = preSelectionTextRange.text.length;
          return {
            start: start,
            end: start + selectedTextRange.text.length
          };
        };
        restoreSelection = function(containerEl, savedSel) {
          var textRange;
          textRange = document.body.createTextRange();
          textRange.moveToElementText(containerEl);
          textRange.collapse(true);
          textRange.moveEnd("character", savedSel.end);
          textRange.moveStart("character", savedSel.start);
          return textRange.select();
        };
      }
      return {
        saveSelection: saveSelection,
        restoreSelection: restoreSelection
      };
    };
    renderComments = function(comments) {
      var $comments;
      jade.render($("#comment-col")[0], "commentViewBox", {
        comments: comments
      });
      return $comments = $(".user-comment");
    };
    Comment = function(data) {
      var timestamp;
      this.user = data.user;
      this.range = data.range;
      this.commentText = data.commentText;
      timestamp = new Date();
      this.timestamp = timestamp.toDateString() + " " + timestamp.toLocaleTimeString();
      return this;
    };
    currentUserSelection = {};
    commentMark = {};
    userComments = [];
    selectControl = selectController();
    $("#airlock").on("mouseup", function(e) {
      var font, left, selected, top, userSel;
      if (!$(e.target).hasClass("glyphicon-edit")) {
        $("#comment-btn-container").remove();
      }
      if ($("#comment-btn-container").length === 0) {
        selected = window.getSelection();
        if (!selected.isCollapsed && selected.rangeCount === 1 && selected.toString().length !== 0) {
          userSel = selectControl.saveSelection(e.originalEvent.target);
          console.log(userSel);
          userSel.containerEl = e.originalEvent.target;
          userSel.originalText = selected.toString();
          currentUserSelection = userSel;
          $(this).append("<div id='comment-btn-container'></div>");
          font = parseInt($(this).css("font-size"));
          top = e.pageY - (font * 3);
          left = e.pageX;
          jade.render($("#comment-btn-container")[0], "commentButton");
          $(".comment-btn").offset({
            top: top,
            left: left
          });
          return console.log(selected.toString(), selected.getRangeAt(0));
        }
      }
    });
    console.log("done");
    $("#airlock").on("click", "#comment-btn-container", function(e) {
      e.stopPropagation();
      jade.render($("#comment-col")[0], "commentEntryBox");
      selectControl.restoreSelection(currentUserSelection.containerEl, currentUserSelection);
      $(this).remove();
      return false;
    });
    $("#comment-col").on("click", "#submit-comment", function(e) {
      var userEntry;
      userEntry = {};
      userEntry.commentText = $(this).closest(".user-comment").find(".form-control").val();
      userEntry.user = "Test User";
      userEntry.range = currentUserSelection;
      userComments.push(new Comment(userEntry));
      console.log(userComments[0]);
      return renderComments(userComments);
    });
    $("#comment-col").on("click", "#cancel-comment", function(e) {
      return renderComments(userComments);
    });
    $("#show-comment").on("click", function() {
      var comment, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = userComments.length; _i < _len; _i++) {
        comment = userComments[_i];
        _results.push(selectControl.restoreSelection(comment.range.containerEl, comment.range));
      }
      return _results;
    });
    $("#comment-col").on("mouseenter", ".user-comment", function(e) {
      var id;
      if ($(this).parent().attr("id") !== "comment-form") {
        $(this).addClass("highlight-box");
        id = +$(this).attr("data-id");
        return selectControl.restoreSelection(userComments[id].range.containerEl, userComments[id].range);
      }
    });
    $("#comment-col").on("mouseleave", ".user-comment", function(e) {
      if ($(this).parent().attr("id") !== "comment-form") {
        $(this).removeClass("highlight-box");
        return window.getSelection().removeAllRanges();
      }
    });
    return $("#comment-col").on("click", ".user-comment", function(e) {
      var id;
      id = +$(this).attr("data-id");
      return selectControl.restoreSelection(userComments[id].range.containerEl, userComments[id].range);
    });
  });

}).call(this);
